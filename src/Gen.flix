
use Monad.{>>=}
use SplittableRandom.{split, nextBool, nextInt32, nextInt64, nextFloat64, nextFloat32}

pub type alias Rand = SplittableRandom

pub enum Gen[a](Int32 -> Rand -> a \ IO)

instance Functor[Gen] {
    pub def map(f: a -> b \ ef, gen: Gen[a]): Gen[b] \ ef =
        checked_ecast(Gen.Gen(size -> rand -> 
            unchecked_cast(f(applyGen(gen, size, rand)) as _ \ IO)))
}

instance Applicative[Gen] {
    /// Returns a generator that generates a value of type `b` by applying the function generated by `fGen` to the value generated by `aGen`.
    pub def ap(fGen: Gen[a -> b \ ef], aGen: Gen[a]): Gen[b] \ ef = 
        checked_ecast(Gen.Gen(size -> rand ->
            let (r1, r2) = split(rand); 
            let func = applyGen(fGen, size, r1);
            unchecked_cast(func(applyGen(aGen, size, r2)) as _ \ IO)))
    
    /// Returns a generator that generates a value of the given type
    pub def point(x: a): Gen[a] = 
        return(x)
}

instance Monad[Gen] {
    pub def flatMap(f: a -> Gen[b] \ ef, aGen: Gen[a]): Gen[b] \ ef =             
        checked_ecast(Gen.Gen(size -> rand -> 
            let (r1, r2) = split(rand);
            unchecked_cast(
                let Gen.Gen(func) = f(applyGen(aGen, size, r1));
                func(size, r2) as _ \ IO
            )
        )
    )
}

/// Returns a generator with of the type `a` and the effect IO.
pub def return(x: a): Gen[a] = 
    Gen.Gen(_ -> _ -> unchecked_cast(x as _ \ IO))

/// Applies the generator to the given size and random number generator.
pub def applyGen(gen: Gen[a], size: Int32, rand: Rand): a \ IO =
    match gen {
        case Gen.Gen(g) => g(size, rand)
    }

/// Returns a generator that generates a value of type `a` in the interval size defines.
pub def sized(f: Int32 -> Gen[a]): Gen[a] = 
    Gen.Gen(size -> rand ->
        applyGen(f(size), size, rand)
    )

/// Makes sure that the generator uses the specified size.
/// 
/// Takes as input size and generator of type `a`.     
///
/// Returns a generator that generates a value of type `a`.
pub def resize(size: Int32, gen: Gen[a]): Gen[a] = 
    Gen.Gen(_ -> rand -> 
        applyGen(gen, size, rand)
    )

pub def rand(): Gen[Rand] = 
    Gen.Gen(_ -> rand -> unchecked_cast(rand as _ \ IO))

/// Returns a generator that generates a value of type `a` from the given non-empty list of generators.
pub def elements(xs: Nel[a]): Gen[a] =
    let vec = Nel.toVector(xs);
    Functor.map(index -> Vector.get(index, vec), chooseInt(0, Vector.length(vec) - 1))

/// Returns a generator that generates a list of values of type `a` of length `n`.
///
/// `n` is the length of the list.
pub def vector(n: Int32): Gen[List[a]] with Arbitrary[a] =
    let gens: List[Gen[a]] = List.map(_ -> Arbitrary.arbitrary(), List.range(0, n));
    List.sequence(gens)

/// Returns a generator that generates a list of length `length` with values of type `a`.
pub def sizedListOf(length: Int32, gen: Gen[a]): Gen[List[a]] =
    let gens: List[Gen[a]] = List.map(_ -> gen, List.range(0, length));
    List.sequence(gens)

/// Returns a generator that generates a list of length `length` with values of type `a` in ascending order.
pub def orderedListOf(length: Int32, gen: Gen[a]): Gen[List[a]] with Order[a] =
    Functor.map(List.sort, sizedListOf(length, gen))

/// Returns a generator that generates a value of type `a` from the given non-empty list of generators.
pub def oneOf(gens: Nel[Gen[a]]): Gen[a] =
    elements(gens) >>= (x -> x)

/// Returns a randomly generated value of type `a` based on the given frequencies.
///
/// `xs`: A non-empty list of pairs, where each pair consists of an integer frequency and a generator for values of type `a`.
///
/// Returns a generator of type `a`.
pub def frequency(xs: Nel[(Int32, Gen[a])]): Gen[a] =
    let total = Nel.foldLeft((acc, x) -> acc + fst(x), 0, xs);
    chooseInt(1, total) >>= (n -> pick(n, xs))

/// Returns a randomly generated value of type `a` based on the given frequency distribution.
///
/// `n` is the number used to select a generator based on its frequency.
///
/// `nel` is the non-empty list of tuples containing frequencies and generators.
///
/// Returns a randomly generated value of type `a`.
pub def pick(n: Int32, nel: Nel[(Int32, Gen[a])]): Gen[a] =
    match nel {
        case Nel.Nel((k, gen), _) if (n <= k) => 
            gen,
        case Nel.Nel((k, _), y :: ys) =>
            pick(n-k, Nel.Nel(y, ys))
        case Nel.Nel((_, _), Nil) =>
            // This should never happen as the sum of all frequencies are equal to n.
            unreachable!()
    }

/// Returns a Generator that uniformly generates values in the interval [lower, upper] for Int8
pub def chooseInt8(lower: Int32, upper: Int32): Gen[Int8] =
    Gen.Gen(_ -> rand ->
        Int32.clampToInt8(
            {min = Int8.minValue()}, 
            {max = Int8.maxValue()},         
            nextInt32(rand, lower, upper + 1)
        )
    )
/// Returns a Generator that uniformly generates values in the interval [lower, upper] for Int16
pub def chooseInt16(lower: Int32, upper: Int32): Gen[Int16] =
    Gen.Gen(_ -> rand ->
        Int32.clampToInt16(
            {min = Int16.minValue()}, 
            {max = Int16.maxValue()}, 
            nextInt32(rand, lower, upper + 1)
        )
    )

/// Returns a Generator that uniformly generates values in the interval [lower, upper] for Int32
pub def chooseInt(lower: Int32, upper: Int32): Gen[Int32] =
    Gen.Gen(_ -> rand ->
        nextInt32(rand, lower, upper + 1)
    )

/// Returns a Generator that uniformly generates values in the interval [lower, upper] for Int64
pub def chooseInt64(lower: Int64, upper: Int64): Gen[Int64] =
    Gen.Gen(_ -> rand ->
        nextInt64(rand, lower, upper + 1i64)
    )
            
/// Returns a generator that uniformly generates a boolean value.
pub def chooseBool(): Gen[Bool] =
    Gen.Gen(_ -> rand ->
        nextBool(rand)
    )

/// Returns a generator that uniformly generates a float32 value in the interval [lower, upper]
pub def chooseFloat32(lower: Float32, upper: Float32): Gen[Float32] =
    Gen.Gen(_ -> rand ->
        nextFloat32(rand, lower, upper)
    )

/// Returns a generator that uniformly generates a float64 value in the interval [lower, upper]
pub def chooseFloat64(lower: Float64, upper: Float64): Gen[Float64] =
    Gen.Gen(_ -> rand ->
        nextFloat64(rand, lower, upper)
    )

pub def chooseBigInt(lower: Int64, upper: Int64): Gen[BigInt] =
    Functor.map(Int64.toBigInt, chooseInt64(lower, upper))

/// Returns a generator that uniformly generates a lower case character.
pub def chooseLowerChar(): Gen[Char] =
    elements(Nel.Nel('a', 
    'b' :: 'c' :: 'd' :: 'e' :: 'f' :: 'g' :: 'h' :: 
    'i' :: 'j' :: 'k' :: 'l' :: 'm' :: 'n' :: 'o' :: 
    'p' :: 'q' :: 'r' :: 's' :: 't' :: 'u' :: 'v' :: 
    'w' :: 'x' :: 'y' :: 'z' :: Nil))
    
/// Returns a generator that uniformly generates an upper case character.    
pub def chooseUpperChar(): Gen[Char] =
    elements(Nel.Nel('A', 
    'B' :: 'C' :: 'D' :: 'E' :: 'F' :: 'G' :: 'H' ::
    'I' :: 'J' :: 'K' :: 'L' :: 'M' :: 'N' :: 'O' ::
    'P' :: 'Q' :: 'R' :: 'S' :: 'T' :: 'U' :: 'V' ::
    'W' :: 'X' :: 'Y' :: 'Z' :: Nil))

/// Returns a generator that uniformly generates a character that is not a letter or a digit.
pub def chooseOtherChar(): Gen[Char] =
    elements(Nel.Nel('!', 
    '"' :: '#' :: '$' :: '%' :: '&' :: '\'' :: '(' :: 
    ')' :: '*' :: '+' :: ',' :: '-' :: '.' :: '/' :: 
    ':' :: ';' :: '<' :: '=' :: '>' :: '?' :: '@' :: 
    '[' :: '\\' :: ']' :: '^' :: '_' :: '`' :: '{' :: 
    '|' :: '}' :: '~' :: Nil))

/// Returns a generator that uniformly generates a string of length `size` with characters generated by `gen`.
pub def chooseString(size: Int32, gen: Gen[Char]): Gen[String] =
    match size {
        case _ if size <= 0 => 
            return(""),
        case _ => 
            Applicative.map2((c, s) -> Char.toString(c) + s, gen, chooseString(size-1, gen))
    }
    

/// Arbitrary trait 
pub trait Arbitrary[a] {
    pub def arbitrary(): Gen[a]
}

/// Arbitrary instance for the unit type.
instance Arbitrary[Unit] {
    pub def arbitrary(): Gen[Unit] =
        Applicative.point()
}

/// Arbitrary instance for the Int8 type.
instance Arbitrary[Int8] {
    pub def arbitrary(): Gen[Int8] =
        sized(size -> chooseInt8(-size, size))
}

/// Arbitrary instance for the Int16 type.
instance Arbitrary[Int16] {
    pub def arbitrary(): Gen[Int16] =
        sized(size -> chooseInt16(-size, size))
}

/// Arbitrary instance for the Int32 type.
instance Arbitrary[Int32] {
    pub def arbitrary(): Gen[Int32] =
        sized(size -> chooseInt(-size, size))
}

/// Arbitrary instance for the Int64 type.
instance Arbitrary[Int64] {
    pub def arbitrary(): Gen[Int64] =
        // This is a temporary solution until we can handle the size parameter in something else than Int32
        chooseInt64(Int64.minValue(), Int64.maxValue() - 1i64)
}
/// Arbitrary instance for the BigInt type.
instance Arbitrary[BigInt] {
    pub def arbitrary(): Gen[BigInt] =
        // This is a temporary solution until we have a better way to generate BigInts.
        chooseBigInt(Int64.minValue(), Int64.maxValue() - 1i64)
}


/// Arbitrary instance for the Bool type.
instance Arbitrary[Bool] {
    pub def arbitrary(): Gen[Bool] =
        chooseBool()
}

/// Arbitrary instance for the Char type.
instance Arbitrary[Char] {
    pub def arbitrary(): Gen[Char] = 
        oneOf(Nel.Nel(chooseLowerChar(), chooseUpperChar() :: Nil))
}

/// Arbitrary instance for the Float32 type.
instance Arbitrary[Float32] {
    pub def arbitrary(): Gen[Float32] = 
        sized(size -> chooseFloat32(Int32.toFloat32(-size), Int32.toFloat32(size)))
}

/// Arbitrary instance for the Float64 type.
instance Arbitrary[Float64] {
    pub def arbitrary(): Gen[Float64] = 
        sized(size -> chooseFloat64(Int32.toFloat64(-size), Int32.toFloat64(size)))
}

/// Arbitrary instance for the String type.
instance Arbitrary[String] {
    pub def arbitrary(): Gen[String] =
        sized(size ->
            chooseInt(0, size) >>= (x -> chooseString(x, oneOf(Nel.Nel(chooseLowerChar(), chooseUpperChar() :: Nil))))
        )
}

/// Arbitrary instance for tuples
instance Arbitrary[(a, b)] with Arbitrary[a], Arbitrary[b] {
    pub def arbitrary(): Gen[(a, b)] =
        Applicative.map2((x, y) -> (x, y), Arbitrary.arbitrary(), Arbitrary.arbitrary())
}

/// Arbitrary instance for triples
instance Arbitrary[(a, b, c)] with Arbitrary[a], Arbitrary[b], Arbitrary[c] {
    pub def arbitrary(): Gen[(a, b, c)] =
        Applicative.map3((x, y, z) -> (x, y, z), Arbitrary.arbitrary(), Arbitrary.arbitrary(), Arbitrary.arbitrary())
}

/// Arbitrary instance for quadruples
instance Arbitrary[(a, b, c, d)] with Arbitrary[a], Arbitrary[b], Arbitrary[c], Arbitrary[d] {
    pub def arbitrary(): Gen[(a, b, c, d)] =
        Applicative.map4((w, x, y, z) -> (w, x, y, z), Arbitrary.arbitrary(), Arbitrary.arbitrary(), Arbitrary.arbitrary(), Arbitrary.arbitrary())
}

/// Arbitrary instance for for the List type.
instance Arbitrary[List[a]] with Arbitrary[a] {
    pub def arbitrary(): Gen[List[a]] =
        sized(size ->
            chooseInt(0, size) >>= vector
        )
}

/// Arbitrary instance for the Non Empty List (Nel) type.
instance Arbitrary[Nel[a]] with Arbitrary[a] {
    pub def arbitrary(): Gen[Nel[a]] =
        sized(size ->
            Applicative.map2((x, xs) -> Nel.Nel(x, xs), Arbitrary.arbitrary(), vector(size - 1))
        )
}

/// Arbitrary instance for the Chain type.
instance Arbitrary[Chain[a]] with Arbitrary[a] {
    pub def arbitrary(): Gen[Chain[a]] =
        sized(size ->
            Functor.map(List.toChain, vector(size))
        )
}

/// Arbitrary instance for the Non Empty Chain (Nec) type.
instance Arbitrary[Nec[a]] with Arbitrary[a] {
    pub def arbitrary(): Gen[Nec[a]] =
        let func = (x, xs) -> 
            match List.toNec(xs) {
                case None => Nec.singleton(x),
                case Some(tail) => Nec.append(Nec.singleton(x), tail)
        };
        sized(size -> Applicative.map2(func, Arbitrary.arbitrary(), vector(size - 1)))
}

/// Arbitrary instance for the Vector type.
instance Arbitrary[Vector[a]] with Arbitrary[a] {
    pub def arbitrary(): Gen[Vector[a]] =
        sized(size -> 
            Functor.map(List.toVector, vector(size))
        )
}

/// Arbitrary instance for the Option type.
instance Arbitrary[Option[a]] with Arbitrary[a] {
    pub def arbitrary(): Gen[Option[a]] = 
        let func = (bool, arb) ->
            match bool {
                case true => Some(arb),
                case false => None
            };
        Applicative.map2(func, chooseBool(), Arbitrary.arbitrary())
}

/// Arbitrary instance for the Result type.
instance Arbitrary[Result[e, t]] with Arbitrary[e], Arbitrary[t] {
    pub def arbitrary(): Gen[Result[e, t]] =
        let func = (bool, eGen, tGen) ->
            match bool {
                case true => Ok(tGen),
                case false => Err(eGen)
            };
        Applicative.map3(func, chooseBool(), Arbitrary.arbitrary(), Arbitrary.arbitrary())
}