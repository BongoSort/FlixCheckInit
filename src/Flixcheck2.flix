

mod FlixCheck2 {
    pub type alias Rand = Int32

    pub enum Gen[a](Int32 -> Rand -> a)

    ///
    /// Applies a generator `g` to a random number `r` and returns the generated value.
    ///
    /// `g` the generator to apply.
    ///
    /// `r` the random number.
    ///
    /// `size` the size of the generated value.
    ///
    /// returns the generated value.
    ///
    pub def applyGen(g: Gen[a], size: Int32, r: Rand): a =
        match g {
            case Gen.Gen(f) => f(size, r)
        }

    /// Returns a generator that generates a value of type `a` in the interval size defines.
    pub def sized(f: Int32 -> Gen[a]): Gen[a] =
        Gen.Gen(size -> rand ->
            let gen = f(size);
            applyGen(gen, size, rand)
        )

    /// Makes sure that the generator uses the specified size.
    /// 
    /// Takes as input size and generator of type `a`.     
    ///
    /// Returns a generator that generates a value of type `a`.
    pub def resize(size: Int32, g: Gen[a]): Gen[a] =
        Gen.Gen(_ -> rand -> 
            applyGen(g, size, rand)
        )

    /// Returns a generator that generates a random number.
    pub def rand(): Gen[Rand] = 
        Gen.Gen(_ -> rand -> rand)
 
    ///
    /// Promotes a function `f` of type `a -> Gen[b]` to a generator of functions of type `a -> b`.
    /// 
    /// `f` The function to promote.
    ///
    /// Returns a generator of functions of type `a -> b`.
    ///
    pub def promote(f: a -> Gen[b]): Gen[a -> b] =
        Gen.Gen(size -> rand ->
            a -> let gen = f(a); 
            applyGen(gen, size, rand)
        )

    ///
    /// Applies a function `f` to each value generated by `aGen`.
    ///
    /// Returns a new generator that produces the transformed values.
    ///
    /// `f` is the function to apply to each generated value.
    ///
    /// `aGen` is the generator for the input values.
    ///
    /// returns a new generator that produces the transformed values.
    ///
    pub def fmap(f: a -> b, aGen: Gen[a]): Gen[b] =
        bind(x -> return(f(x)), aGen)

    /// Returns a generator that generates a value of the given type
    pub def return(x: a): Gen[a] = 
        Gen.Gen(_ -> _ -> x)

    ///
    /// Binds a generator function `f` to a generator `aGen`.
    /// 
    /// `f` is the generator function that takes a value of type `a` and returns a generator of type `b`.
    ///
    /// `aGen` the generator of type `a`.
    ///
    /// Returns a generator of type `b` obtained by applying `f` to values generated by `aGen`.
    ///
    pub def bind(f: a -> Gen[b], aGen: Gen[a]): Gen[b] =
        Gen.Gen(size -> rand ->
            let (r1, r2) = splitRand(rand);
            let bGen = f(applyGen(aGen, size, r1));
            applyGen(bGen, size, r2)
        )
        
    /// Returns a generator that generates a value of type `a` from the given non-empty list of generators.
    pub def elements(xs: Nel[a]): Gen[a] =
        let vec = Nel.toVector(xs);
        fmap(index -> Vector.get(index, vec), chooseInt(0, Vector.length(vec) - 1))
   
    /// Returns a generator that generates a list of values of type `a` of length `n`.
    ///
    /// `n` is the length of the list.
    pub def vector(n: Int32): Gen[List[a]] with Arbitrary[a] =
        let gens: List[Gen[a]] = List.map(_ -> Arbitrary.arbitrary(), List.range(0, n));
        sequence(gens)

    /// Returns a generator that generates a list of values of type `a` 
    pub def sequence(gens: List[Gen[a]]): Gen[List[a]] =
        match gens {
            case Nil => 
                return(Nil)
            case x :: xs => 
                let func = y -> fmap(z -> y :: z, sequence(xs));
                bind(func, x)
        }
    /// Returns a generator that generates a value of type `a` from the given non-empty list of generators.
    pub def oneOf(xs: Nel[Gen[a]]): Gen[a] =
        bind(x -> x, elements(xs))


    /// Returns a randomly generated value of type `a` based on the given frequencies.
    ///
    /// `xs`: A non-empty list of pairs, where each pair consists of an integer frequency and a generator for values of type `a`.
    ///
    /// Returns a generator of type `a`.
    pub def frequency(xs: Nel[(Int32, Gen[a])]): Gen[a] =
        let total = Nel.foldLeft((acc, x) -> acc + fst(x), 0, xs);
        bind(x -> pick(x, xs), chooseInt(1, total))

    ///
    /// Returns a randomly generated value of type `a` based on the given frequency distribution.
    ///
    /// `n` is the number used to select a generator based on its frequency.
    ///
    /// `nel` is the non-empty list of tuples containing frequencies and generators.
    ///
    /// Returns a randomly generated value of type `a`.
    ///
    pub def pick(n: Int32, nel: Nel[(Int32, Gen[a])]): Gen[a] =
        match nel {
            case Nel.Nel((k, gen), _) if (n <= k) => 
                gen,
            case Nel.Nel((k, _), y :: ys) =>
                pick(n-k, Nel.Nel(y, ys))
            case Nel.Nel((_, _), Nil) =>
                // This should never happen as the sum of all frequencies are equal to n.
                unreachable!()
        }
    
    /// Lifts a function with 2 parameters to a monadic context
    pub def liftM2(f: a -> b -> c, aGen: Gen[a], bGen: Gen[b]): Gen[c] =
        let func = x -> fmap(y -> f(x, y), bGen);
        bind(func, aGen)

    /// Lifts a function with 3 parameters to a monadic context
    pub def liftM3(f: a -> b -> c -> d, aGen: Gen[a], bGen: Gen[b], cGen: Gen[c]): Gen[d] =
        let func = x -> liftM2(f(x), bGen, cGen);
        bind(func, aGen)
    
    /// Lifts a function with 4 parameters to a monadic context
    pub def liftM4(f: a -> b -> c -> d -> e, aGen: Gen[a], bGen: Gen[b], cGen: Gen[c], dGen: Gen[d]): Gen[e] =
        let func = x -> liftM3(f(x), bGen, cGen, dGen);
        bind(func, aGen)

    /// Returns a Generator that uniformly generates values in the interval [lower, upper]
    pub def chooseInt(lower: Int32, upper: Int32): Gen[Int32] = 
        let f = rand -> (Int32.abs(Int32.remainder(rand, (upper + 1) - lower)) + lower);
        fmap(f, rand())

    /// Returns a generator that uniformly generates a boolean value.
    pub def chooseBool(): Gen[Bool] =
        elements(Nel.Nel(true, false :: Nil))

    /// Returns a generator that uniformly generates a float value in the interval [lower, upper]
    pub def chooseFloat(lower: Int32, upper: Int32): Gen[Float32] =
        Gen.Gen(size -> rand -> 
            let (r1, r2) = splitRand(rand);
            let intGen = chooseInt(lower, upper - 1);
            let quotientGen = chooseInt(0, Int32.maxValue());

            let quotient = Int32.toFloat32(applyGen(quotientGen, size, r1));
            let fraction: Float32 = quotient/Int32.toFloat32(Int32.maxValue());

            Int32.toFloat32(applyGen(intGen, size, r2)) + fraction
        )


    /// Returns a generator that uniformly generates a lower case character.
    pub def chooseLowerChar(): Gen[Char] =
        elements(Nel.Nel('a', 
        'b' :: 'c' :: 'd' :: 'e' :: 'f' :: 'g' :: 'h' :: 
        'i' :: 'j' :: 'k' :: 'l' :: 'm' :: 'n' :: 'o' :: 
        'p' :: 'q' :: 'r' :: 's' :: 't' :: 'u' :: 'v' :: 
        'w' :: 'x' :: 'y' :: 'z' :: Nil))


    /// Returns a generator that uniformly generates an upper case character.
    pub def chooseUpperChar(): Gen[Char] =
        elements(Nel.Nel('A', 
        'B' :: 'C' :: 'D' :: 'E' :: 'F' :: 'G' :: 'H' ::
        'I' :: 'J' :: 'K' :: 'L' :: 'M' :: 'N' :: 'O' ::
        'P' :: 'Q' :: 'R' :: 'S' :: 'T' :: 'U' :: 'V' ::
        'W' :: 'X' :: 'Y' :: 'Z' :: Nil))

    // /// Should generate a list using average length for controlling the generated list size for a better distribution for testing
    // pub def randomListSizedAvg(aGen: Gen[a], avgLength: Int32, bound: Int32): Gen[List[a]] =
    //     Gen.Gen(size -> rand ->
    //         let (r1, r2) = splitRand(rand);
    //         let (r3, r4) = splitRand(r1);
    //         if (bound <= 0) 
    //             Nil
    //         else
    //             match applyGen(chooseInt(0, avgLength), size, r2) {
    //                 case 0 => Nil,
    //                 case _ => applyGen(aGen, size, r3) :: applyGen(randomListSizedAvg(aGen, avgLength, bound-1), size, r4)
    //             }
    //     )

    // /// Should generate a non-empty list with length in the interval [1, length]
    // pub def randomNelSized(aGen: Gen[a], maxLength: Int32): Gen[Nel[a]] =
    //     Gen.Gen(size -> rand ->
    //         let (r1, r2) = splitRand(rand);
    //         let listGen = randomListSized(aGen, maxLength - 1);
    //         let aList = applyGen(listGen, size, r1);
    //         Nel.Nel(applyGen(aGen, size, r2), aList)
    //     )

    // /// Should generate a chain with length in the interval [0, length]
    // pub def randomChainSized(aGen: Gen[a], maxLength: Int32): Gen[Chain[a]] =
    //     Gen.Gen(size -> rand -> 
    //         let listGen = randomListSized(aGen, maxLength);
    //         let l = applyGen(listGen, size, rand);
    //         List.toChain(l)
    //     )

    // /// Should generate a non-empty chain with length in the interval [1, length]
    // pub def randomNecSized(aGen: Gen[a], maxLength: Int32): Gen[Nec[a]] =
    //     Gen.Gen(size -> rand -> 
    //         let (r1, r2) = splitRand(rand);
    //         let listGen = randomListSized(aGen, maxLength - 1);
    //         let aList = applyGen(listGen, size, r1);
    //         let necHead = Nec.NecOne(applyGen(aGen, size, r2));
    //         match List.toNec(aList) {
    //             case None => necHead,
    //             case Some(necTail) => Nec.Nec(necHead, necTail)
    //         }
    //     )

    // /// Should generate a vector with length in the interval [0, length]
    // pub def randomVectorSized(aGen: Gen[a], maxLength: Int32): Gen[Vector[a]] =
    //     Gen.Gen(size -> rand ->
    //         let listGen = randomListSized(aGen, maxLength);
    //         let aList = applyGen(listGen, size, rand);
    //         List.toVector(aList)
    //     )

    /// Should generate Some value or None with equal probability 
    pub def optionGenerator(aGen: Gen[a]): Gen[Option[a]] =
        Gen.Gen(size -> rand ->
            let (r1, r2) = splitRand(rand);
            match applyGen(chooseBool(), size, r1) {
                case true => Some(applyGen(aGen, size, r2)),
                case false => None
            }
        )

    /// Should generate Ok value or Err value with equal probability
    pub def resultGenerator(eGen: Gen[e], tGen: Gen[t]): Gen[Result[e, t]] =
        Gen.Gen(size -> rand ->
            let (r1, r2) = splitRand(rand);
            match applyGen(chooseBool(), size, r1) {
                case true => Ok(applyGen(tGen, size, r2)),
                case false => Err(applyGen(eGen, size, r2))
            }
        )

    // Arbitrary trait
    pub trait Arbitrary[a] {
        pub def arbitrary(): Gen[a]
    }

    // Arbitrary instances
    instance Arbitrary[Unit] {
        pub def arbitrary(): Gen[Unit] =
            return()
    }

    instance Arbitrary[Int32] {
        pub def arbitrary(): Gen[Int32] =
            sized(size -> chooseInt(-size, size))
    }

    instance Arbitrary[Bool] {
        pub def arbitrary(): Gen[Bool] =
            chooseBool()
    }

    instance Arbitrary[Char] {
        pub def arbitrary(): Gen[Char] = 
            chooseLowerChar()
    }

    instance Arbitrary[Float32] {
        pub def arbitrary(): Gen[Float32] = 
            sized(size -> chooseFloat(-size, size))
    }

    instance Arbitrary[(a, b)] with Arbitrary[a], Arbitrary[b] {
        pub def arbitrary(): Gen[(a, b)] =
            liftM2((x, y) -> (x, y), Arbitrary.arbitrary(), Arbitrary.arbitrary())
    }

    instance Arbitrary[(a, b, c)] with Arbitrary[a], Arbitrary[b], Arbitrary[c] {
        pub def arbitrary(): Gen[(a, b, c)] =
            liftM3((x, y, z) -> (x, y, z), Arbitrary.arbitrary(), Arbitrary.arbitrary(), Arbitrary.arbitrary())
    }

    instance Arbitrary[(a, b, c, d)] with Arbitrary[a], Arbitrary[b], Arbitrary[c], Arbitrary[d] {
        pub def arbitrary(): Gen[(a, b, c, d)] =
            liftM4((x, y, z, w) -> (x, y, z, w), Arbitrary.arbitrary(), Arbitrary.arbitrary(), Arbitrary.arbitrary(), Arbitrary.arbitrary())
    }

    instance Arbitrary[List[a]] with Arbitrary[a] {
        pub def arbitrary(): Gen[List[a]] =
            sized(size -> 
                bind(n -> vector(n), chooseInt(0, size))
            )
    }

    instance Arbitrary[Nel[a]] with Arbitrary[a] {
        pub def arbitrary(): Gen[Nel[a]] =
            sized(size ->
                liftM2((x, xs) -> Nel.Nel(x, xs), Arbitrary.arbitrary(), vector(size - 1))
            )
    }

    instance Arbitrary[Chain[a]] with Arbitrary[a] {
        pub def arbitrary(): Gen[Chain[a]] =
                sized(size -> 
                    fmap(l -> List.toChain(l), vector(size))
                )
    }

    instance Arbitrary[Nec[a]] with Arbitrary[a] {
        pub def arbitrary(): Gen[Nec[a]] =
            FlixCheck1.return(Nec.singleton(Arbitrary.arbitrary()));
            ???
            
    }

    instance Arbitrary[Vector[a]] with Arbitrary[a] {
        pub def arbitrary(): Gen[Vector[a]] =
                ???
            // sized(size -> randomVectorSized(Arbitrary.arbitrary(), size))
    }

    instance Arbitrary[Option[a]] with Arbitrary[a] {
        pub def arbitrary(): Gen[Option[a]] = 
            optionGenerator(Arbitrary.arbitrary())
    }

    instance Arbitrary[Result[e, t]] with Arbitrary[e], Arbitrary[t] {
        pub def arbitrary(): Gen[Result[e, t]] =
            resultGenerator(Arbitrary.arbitrary(), Arbitrary.arbitrary())
    }
}